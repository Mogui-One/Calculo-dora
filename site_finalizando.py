# calculadora_streamlit.py

# ==================================================================================================
# BIBLIOTECAS
# ==================================================================================================
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import sympy as sp
from sympy import symbols, sympify, diff, integrate, limit, oo, latex, lambdify, Rational
from matplotlib.patches import Rectangle
import io
import imageio.v2 as imageio

# ==================================================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA E ESTADO DA SESS√ÉO
# ==================================================================================================
st.set_page_config(layout="wide")

# Inicializa as vari√°veis de estado da sess√£o se elas n√£o existirem
if 'pagina_atual' not in st.session_state:
    st.session_state.pagina_atual = 'home'
if 'limite_eixo' not in st.session_state:
    st.session_state.limite_eixo = 10
# Adiciona o tema ao estado da sess√£o, com 'Escuro' como padr√£o
if 'theme' not in st.session_state:
    st.session_state.theme = 'Escuro'

# ==================================================================================================
# CABE√áALHO COM CONFIGURA√á√ïES GLOBAIS
# ==================================================================================================
# Layout em colunas para o t√≠tulo e o bot√£o de configura√ß√µes
col_titulo, col_config = st.columns([0.9, 0.1])

with col_titulo:
    # NOME DO SITE ATUALIZADO
    st.markdown("""
        <h1 style='text-align: left;'>üß† C√°lculo (Dora)</h1>
    """, unsafe_allow_html=True)

with col_config:
    # O Popover cria o menu de configura√ß√µes que aparece ao clicar no √≠cone
    with st.popover("‚öôÔ∏è"):
        st.markdown("##### Configura√ß√µes Gerais")
        # Slider para o intervalo dos eixos
        st.session_state.limite_eixo = st.slider(
            "Intervalo dos eixos do gr√°fico:",
            min_value=1,
            max_value=50,
            value=st.session_state.limite_eixo,
            help="Define o intervalo de visualiza√ß√£o para os eixos X e Y, de -Valor a +Valor."
        )
        # Seletor de tema claro/escuro
        st.session_state.theme = st.radio(
            "Tema do Site:",
            ('Escuro', 'Claro'),
            key='theme_selector',
            index=0 if st.session_state.theme == 'Escuro' else 1
        )

st.markdown("<hr style='border: 1px solid #ccc; margin-top: -10px;' />", unsafe_allow_html=True)


# ==================================================================================================
# MENU LATERAL (SIDEBAR)
# ==================================================================================================
with st.sidebar:
    st.markdown("### üß≠ Navega√ß√£o")
    if st.button("üè† In√≠cio"):
        st.session_state.pagina_atual = "home"
    
    with st.expander("üé• EXEMPLOS"):
        if st.button("üé• Bisse√ß√£o"):
            st.session_state.pagina_atual = "ex_bissecao" 
        if st.button("üé• Falsa posi√ß√£o"):
            st.session_state.pagina_atual = "ex_falsaposicao"           
    
    with st.expander("üìò C√°lculo 1"):
        if st.button("‚úèÔ∏è Derivadas"):
            st.session_state.pagina_atual = "derivadas"
        if st.button("üìê Integrais"):
            st.session_state.pagina_atual = "integrais"
        if st.button("üìè Limites"):
            st.session_state.pagina_atual = "limites"
            
    with st.expander("üìô C√°lculo 2"):
        if st.button("üìä S√©ries de Taylor"):
            st.session_state.pagina_atual = "taylor"
        if st.button("üîÅ Integrais Duplas"):
            st.session_state.pagina_atual = "integrais_duplas"
        if st.button("üåÄ Equa√ß√µes Diferenciais"):
            st.session_state.pagina_atual = "equacoes_diferenciais"
            
    with st.expander("üìó C√°lculo Num√©rico"):
        if st.button("üîç M√©todo Gr√°fico"):
            st.session_state.pagina_atual = "metodo_grafico"
        if st.button("üîç Bisse√ß√£o"):
            st.session_state.pagina_atual = "bissecao"
        if st.button("üîç Falsa Posi√ß√£o"):
            st.session_state.pagina_atual = "falsa_posicao"
        if st.button("‚öôÔ∏è Ponto Fixo"):
            st.session_state.pagina_atual = "ponto_fixo"
        if st.button("‚öôÔ∏è M√©todo de Newton"):
            st.session_state.pagina_atual = "newton"
        if st.button("‚öôÔ∏è Secante"):
            st.session_state.pagina_atual = "secante"
        if st.button("Jacobi-Richardson"):
            st.session_state.pagina_atual = "jacobi"
            
        
# ==================================================================================================
# CONTE√öDO DAS P√ÅGINAS
# ==================================================================================================
pagina = st.session_state.pagina_atual
# P√ÅGINA HOME (VERS√ÉO COM LAYOUT CORRIGIDO FINAL) =================================================

# P√ÅGINA HOME (VERS√ÉO COM LAYOUT CORRIGIDO FINAL) =================================================
if pagina == "home":

    # INJE√á√ÉO DE CSS PARA FOR√áAR O LAYOUT WIDE APENAS NESTA P√ÅGINA
    # Este CSS √© mais "agressivo" e remove as restri√ß√µes de layout do Streamlit.
    st.markdown("""
        <style>
            /* Remove o padding do container principal do Streamlit */
            .main .block-container {
                padding-top: 0rem;
                padding-bottom: 0rem;
                padding-left: 0rem;
                padding-right: 0rem;
            }
            /* For√ßa o iframe a ocupar a tela inteira */
            iframe {
                width: 100%;
                min-height: 95vh; /* Usa a altura da tela como refer√™ncia */
                border: none;
            }
        </style>
        """, unsafe_allow_html=True)

    # Determina as classes e cores com base no tema selecionado no estado da sess√£o
    theme_mode = st.session_state.get('theme', 'Escuro')
    theme_class = "light-mode" if theme_mode == 'Claro' else ''
    particle_color_js = 'rgba(0, 0, 0, 0.08)' if theme_mode == 'Claro' else 'rgba(255, 255, 255, 0.1)'

    # O f-string √© usado para injetar a classe de tema e a cor da part√≠cula no HTML
    html_code = f"""
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explorador de C√°lculo - In√≠cio</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');

            :root {{
                --bg-color: #121212;
                --text-color: #e0e0e0;
                --subtle-text-color: #a0a0a0;
                --header-color: #ffffff;
                --card-bg: rgba(255, 255, 255, 0.05);
                --card-border: rgba(255, 255, 255, 0.1);
                --card-shadow: rgba(0, 0, 0, 0.4);
                --card-list-border: rgba(255, 255, 255, 0.08);
                --card-title-color: #4dabf7;
                --footer-color: #666;
            }}

            .light-mode {{
                --bg-color: #f0f2f5;
                --text-color: #1c1e21;
                --subtle-text-color: #606770;
                --header-color: #000000;
                --card-bg: rgba(255, 255, 255, 0.8);
                --card-border: rgba(0, 0, 0, 0.1);
                --card-shadow: rgba(0, 0, 0, 0.1);
                --card-list-border: rgba(0, 0, 0, 0.1);
                --card-title-color: #1877f2;
                --footer-color: #888;
            }}

            * {{ margin: 0; padding: 0; box-sizing: border-box; }}

            body {{
                font-family: 'Poppins', sans-serif;
                background-color: var(--bg-color);
                color: var(--text-color);
                overflow: hidden;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                text-align: center;
            }}

            #background-canvas {{
                position: fixed; top: 0; left: 0;
                width: 100%; height: 100%; z-index: -1;
            }}

            .main-container {{
                width: 100%;
                padding: 40px 5%;
                z-index: 1; display: flex; flex-direction: column;
                align-items: center; gap: 40px;
            }}

            header {{ margin-bottom: 20px; }}

            /* Anima√ß√£o de digita√ß√£o */
            .typing-title {{
                font-size: 3.5rem;
                font-weight: 700;
                color: var(--header-color);
                text-shadow: 0 0 15px rgba(100, 100, 255, 0.3);
                overflow: hidden;
                border-right: .12em solid var(--card-title-color);
                white-space: nowrap;
                margin: 0 auto;
                letter-spacing: .1em;
                animation: typing 3s steps(20, end), blink-caret .75s step-end infinite;
            }}

            @keyframes typing {{
              from {{ width: 0 }}
              to {{ width: 100% }}
            }}

            @keyframes blink-caret {{
              from, to {{ border-color: transparent }}
              50% {{ border-color: var(--card-title-color); }}
            }}
            
            header p {{
                font-size: 1.2rem; color: var(--subtle-text-color); margin-top: 20px; max-width: 600px;
            }}
            
            .cards-container {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 25px; width: 100%;
            }}

            .card {{
                background: var(--card-bg);
                backdrop-filter: blur(10px);
                border: 1px solid var(--card-border);
                border-radius: 15px; padding: 25px;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }}

            .card:hover {{
                transform: translateY(-10px);
                box-shadow: 0 10px 30px var(--card-shadow);
            }}

            .card h3 {{
                font-size: 1.5rem; margin-bottom: 15px; color: var(--card-title-color);
            }}
            
            .card ul {{
                list-style: none; text-align: left; padding-left: 0;
            }}

            .card ul li {{
                padding: 8px 0; border-bottom: 1px solid var(--card-list-border);
            }}

            .card ul li:last-child {{ border-bottom: none; }}
            
            footer {{
                margin-top: 30px; color: var(--footer-color); font-size: 0.9rem;
            }}
        </style>
    </head>
    <body class="{theme_class}">
        <canvas id="background-canvas"></canvas>

        <div class="main-container">
            <header>
                <h1 class="typing-title">üß† C√°lculo (Dora)</h1>
                <p>Sua plataforma interativa para explorar o universo do C√°lculo. Navegue pelos t√≥picos no menu lateral.</p>
            </header>

            <div class="cards-container">
                <div class="card">
                    <h3>üìò C√°lculo 1</h3>
                    <ul><li>‚úèÔ∏è Derivadas</li><li>üìê Integrais</li><li>üìè Limites</li></ul>
                </div>
                <div class="card">
                    <h3>üìô C√°lculo 2</h3>
                    <ul><li>üìä S√©ries de Taylor</li><li>üîÅ Integrais Duplas</li><li>üåÄ Equa√ß√µes Diferenciais</li></ul>
                </div>
                <div class="card">
                    <h3>üìó C√°lculo Num√©rico</h3>
                    <ul><li>üîç M√©todos de Ra√≠zes</li><li>‚öôÔ∏è Interpola√ß√£o</li><li>üìà Ajuste de Curvas</li></ul>
                </div>
            </div>

            <footer>
                <p>üöÄ Projeto desenvolvido por Lucas Matias.</p>
            </footer>
        </div>

        <script>
            const canvas = document.getElementById('background-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            const symbols = ['‚à´', '‚àÇ', '‚àë', '‚àû', 'Œ±', 'Œ≤', 'œÄ', 'lim', '‚àö', '∆í(x)'];
            const particles = [];
            const numberOfParticles = 40;

            class Particle {{
                constructor() {{
                    this.x = Math.random() * canvas.width;
                    this.y = Math.random() * canvas.height;
                    this.size = Math.random() * 15 + 10;
                    this.speedX = Math.random() * 1 - 0.5;
                    this.speedY = Math.random() * 1 - 0.5;
                    this.symbol = symbols[Math.floor(Math.random() * symbols.length)];
                    this.color = '{particle_color_js}';
                }}
                update() {{
                    this.x += this.speedX; this.y += this.speedY;
                    if (this.x > canvas.width + 20) this.x = -20;
                    if (this.x < -20) this.x = canvas.width + 20;
                    if (this.y > canvas.height + 20) this.y = -20;
                    if (this.y < -20) this.y = canvas.height + 20;
                }}
                draw() {{
                    ctx.fillStyle = this.color;
                    ctx.font = this.size + 'px Poppins';
                    ctx.fillText(this.symbol, this.x, this.y);
                }}
            }}

            function init() {{
                particles.length = 0;
                for (let i = 0; i < numberOfParticles; i++) {{ particles.push(new Particle()); }}
            }}

            function animate() {{
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < particles.length; i++) {{ particles[i].update(); particles[i].draw(); }}
                requestAnimationFrame(animate);
            }}

            window.addEventListener('resize', () => {{
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                init();
            }});
            
            init();
            animate();
        </script>
    </body>
    </html>
    """
    
    # Renderiza o componente HTML. A altura aqui √© menos cr√≠tica, pois o CSS est√° controlando o layout.
    st.components.v1.html(html_code, height=900, scrolling=False)


# EXEMPLO - BISSE√á√ÉO =================================================================================
elif pagina == "ex_bissecao":
    st.subheader("üìä Exemplo: M√©todo da Bisse√ß√£o")
    st.info("Este v√≠deo mostra a aplica√ß√£o gr√°fica do m√©todo da bisse√ß√£o.")
    st.markdown("### üé¨ Assista ao v√≠deo:")
    try:
        with open("BissecaoDividido.mp4", "rb") as f:
            video_bytes = f.read()
            st.video(video_bytes)
    except FileNotFoundError:
        st.error("Arquivo de v√≠deo 'BissecaoDividido.mp4' n√£o encontrado. Coloque o v√≠deo na mesma pasta do script.")

# EXEMPLO - FALSA POSI√á√ÉO ============================================================================
elif pagina == "ex_falsaposicao":
    st.subheader("üìä Exemplo: M√©todo da Falsa Posi√ß√£o")
    st.info("Este v√≠deo mostra a aplica√ß√£o gr√°fica do m√©todo da falsa posi√ß√£o.")
    st.markdown("### üé¨ Assista ao v√≠deo:")
    try:
        with open("FalsaPosicaoDividido.mp4", "rb") as f:
            video_bytes = f.read()
            st.video(video_bytes)
    except FileNotFoundError:
        st.error("Arquivo de v√≠deo 'FalsaPosicaoDividido.mp4' n√£o encontrado. Coloque o v√≠deo na mesma pasta do script.")

# C1 - DERIVADAS (com configura√ß√£o global de eixos) ==================================================
elif pagina == "derivadas":
    st.subheader("‚úèÔ∏è Rela√ß√£o Gr√°fica entre uma Fun√ß√£o e sua Derivada")
    
    # L√™ o valor do limite do eixo a partir do estado da sess√£o (definido no popover global)
    limite_eixo = st.session_state.limite_eixo

    # Input da fun√ß√£o
    func_str = st.text_input("Digite a fun√ß√£o f(x):", "sin(x)")

    try:
        # --- C√°lculos com Sympy ---
        x = sp.symbols('x')
        f_expr = sp.sympify(func_str)
        df_expr = sp.diff(f_expr, x)
        df_expr_simplified = sp.simplify(df_expr)

        # Converte as express√µes para fun√ß√µes num√©ricas
        f_numeric = sp.lambdify(x, f_expr, 'numpy')
        df_numeric = sp.lambdify(x, df_expr_simplified, 'numpy')

        # --- Exibi√ß√£o dos Resultados ---
        st.markdown("---")
        st.success(f"A derivada da fun√ß√£o $f(x) = {sp.latex(f_expr)}$ √©:")
        st.latex(r"f'(x) = " + sp.latex(df_expr_simplified))
        st.markdown("---")

        # --- Se√ß√£o Interativa para An√°lise em um Ponto ---
        analisar_ponto = st.toggle("Analisar em um ponto espec√≠fico?", value=True)
        x0 = None

        if analisar_ponto:
            # O slider do ponto de an√°lise agora respeita o limite do eixo
            valor_default_slider = 1.5 if 1.5 < limite_eixo else float(limite_eixo/2)
            x0 = st.slider("Escolha o ponto de an√°lise $x_0$:", 
                           float(-limite_eixo), 
                           float(limite_eixo), 
                           valor_default_slider, 
                           step=0.1)

        # --- Cria√ß√£o do Gr√°fico ---
        x_vals = np.linspace(-limite_eixo, limite_eixo, 1000)
        y_vals = np.array([f_numeric(val) if np.isfinite(f_numeric(val)) else np.nan for val in x_vals])
        df_vals = np.array([df_numeric(val) if np.isfinite(df_numeric(val)) else np.nan for val in x_vals])

        fig, ax = plt.subplots(figsize=(8, 8))

        # Plot da fun√ß√£o original e da derivada
        ax.plot(x_vals, y_vals, label="$f(x)$ (Fun√ß√£o Original)", color='blue', linewidth=2)
        ax.plot(x_vals, df_vals, label="$f'(x)$ (A Derivada)", color='red', linestyle='--', linewidth=2)

        # --- Elementos visuais da an√°lise no ponto ---
        if analisar_ponto and x0 is not None:
            y0 = f_numeric(x0)
            df_at_x0 = df_numeric(x0)
            
            if np.isfinite(y0) and np.isfinite(df_at_x0):
                tangent_line = df_at_x0 * (x_vals - x0) + y0
                ax.plot(x_vals, tangent_line, label=f"Reta Tangente em x={x0:.1f}", color='green', linestyle=':', linewidth=2.5)
                ax.scatter([x0], [y0], color='blue', s=100, zorder=5, edgecolors='black', label=f'Ponto em f(x): ({x0:.1f}, {y0:.2f})')
                ax.scatter([x0], [df_at_x0], color='red', s=100, zorder=5, edgecolors='black', label=f"Valor de f'(x): {df_at_x0:.2f}")
                ax.plot([x0, x0], [y0, df_at_x0], color='black', linestyle='-.', linewidth=1.2)
        
        # Configura√ß√µes do gr√°fico
        ax.axhline(0, color='black', linewidth=0.8, linestyle='-')
        ax.axvline(0, color='black', linewidth=0.8, linestyle='-')
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.set_title("Gr√°fico Comparativo de $f(x)$ e $f'(x)$")
        ax.legend(loc='upper left')
        ax.grid(True, which='both', linestyle=':', linewidth=0.5)
        
        ax.set_xlim(-limite_eixo, limite_eixo)
        ax.set_ylim(-limite_eixo, limite_eixo)
        ax.set_aspect('equal', adjustable='box')

        st.pyplot(fig)

        # --- Exibi√ß√£o dos valores calculados ---
        if analisar_ponto and x0 is not None:
            y0_val = f_numeric(x0)
            df_val = df_numeric(x0)
            if np.isfinite(y0_val) and np.isfinite(df_val):
                st.markdown("### An√°lise no Ponto $x_0$")
                col1, col2 = st.columns(2)
                col1.metric(label=f"Valor da fun√ß√£o, $f({x0:.2f})$", value=f"{y0_val:.4f}")
                col2.metric(label=f"Valor da derivada, $f'({x0:.2f})$", value=f"{df_val:.4f}")
                st.info(f"Observe que a inclina√ß√£o da reta tangente verde √© exatamente o valor da derivada: **{df_val:.4f}**.")
            else:
                st.warning(f"A fun√ß√£o ou sua derivada n√£o est√° definida ou √© infinita no ponto $x_0 = {x0:.2f}$.")

        # --- Guia Did√°tico Geral ---
        st.markdown("### Como interpretar o gr√°fico?")
        st.info("""
        - **Curva Azul ($f(x)$):** Sua fun√ß√£o original.
        - **Curva Vermelha ($f'(x)$):** Representa a inclina√ß√£o da curva azul em cada ponto.
        
        **Rela√ß√µes importantes:**
        1. Onde a **curva azul sobe**, a **vermelha √© positiva**.
        2. Onde a **curva azul desce**, a **vermelha √© negativa**.
        3. Em um pico ou vale da **curva azul**, a **vermelha cruza o zero**.
        """)

    except Exception as e:
        st.error(f"Houve um erro ao interpretar a sua fun√ß√£o. Verifique a sintaxe. (Ex: use 'x**2' para $x^2$). Erro: {str(e)}")


# C1 - INTEGRAIS (VERS√ÉO REVISADA E CORRIGIDA) =================================================================
elif pagina == "integrais":
    # Importa as classes necess√°rias para desenhar as formas
    from matplotlib.patches import Rectangle, Polygon

    st.subheader("üìê Visualizando a Integral Definida (Soma de Riemann)")
    
    # L√™ o valor do limite do eixo a partir do estado da sess√£o
    limite_eixo = st.session_state.limite_eixo

    # --- Entradas do Usu√°rio ---
    func_str = st.text_input("Digite a fun√ß√£o f(x):", "4 - x**2")
    
    col1, col2 = st.columns(2)
    with col1:
        # Garante que os limites de integra√ß√£o respeitem os limites do gr√°fico
        a = st.number_input("Limite inferior de integra√ß√£o (a):", 
                              min_value=float(-limite_eixo), 
                              max_value=float(limite_eixo), 
                              value=0.0)
    with col2:
        b = st.number_input("Limite superior de integra√ß√£o (b):", 
                              min_value=float(-limite_eixo), 
                              max_value=float(limite_eixo), 
                              value=2.0)

    method = st.selectbox(
        "Escolha o m√©todo de aproxima√ß√£o:",
        ("Ponto Esquerdo", "Ponto Direito", "Ponto M√©dio", "Trap√©zio"),
        help="Define como a altura de cada subdivis√£o √© calculada."
    )
    
    n = st.slider("N√∫mero de subdivis√µes (n):", 1, 200, 10, help="Quanto mais subdivis√µes, mais precisa a aproxima√ß√£o.")

    try:
        # --- C√°lculos com Sympy ---
        x = sp.symbols('x')
        func_sympy = sp.sympify(func_str)
        func_numeric = sp.lambdify('x', func_sympy, 'numpy')

        # --- Cria√ß√£o do Gr√°fico ---
        fig, ax = plt.subplots(figsize=(8, 8))
        
        # Plot da fun√ß√£o no intervalo do gr√°fico global
        x_graph = np.linspace(-limite_eixo, limite_eixo, 1000)
        y_graph = func_numeric(x_graph)
        ax.plot(x_graph, y_graph, label="f(x)", color="blue", linewidth=2)

        # Preenche a √°rea exata sob a curva no intervalo [a, b]
        x_fill = np.linspace(a, b, 200)
        y_fill = func_numeric(x_fill)
        ax.fill_between(x_fill, y_fill, where=(y_fill > 0), color='skyblue', alpha=0.5, label="√Årea exata (positiva)")
        ax.fill_between(x_fill, y_fill, where=(y_fill < 0), color='salmon', alpha=0.5, label="√Årea exata (negativa)")

        # --- L√≥gica de aproxima√ß√£o e plot das formas ---
        area_aproximada = 0
        if n > 0 and b > a:
            dx = (b - a) / n
            for i in range(n):
                x_i = a + i * dx
                x_i_plus_1 = x_i + dx
                
                if method == "Ponto Esquerdo":
                    height = func_numeric(x_i)
                    shape = Rectangle((x_i, 0), dx, height, edgecolor="black", facecolor="orange", alpha=0.7)
                    area_aproximada += height * dx
                elif method == "Ponto Direito":
                    height = func_numeric(x_i_plus_1)
                    shape = Rectangle((x_i, 0), dx, height, edgecolor="black", facecolor="orange", alpha=0.7)
                    area_aproximada += height * dx
                elif method == "Ponto M√©dio":
                    height = func_numeric(x_i + dx/2)
                    shape = Rectangle((x_i, 0), dx, height, edgecolor="black", facecolor="orange", alpha=0.7)
                    area_aproximada += height * dx
                elif method == "Trap√©zio":
                    y_i = func_numeric(x_i)
                    y_i_plus_1 = func_numeric(x_i_plus_1)
                    # Agora o Polygon est√° definido corretamente
                    shape = Polygon([[x_i, 0], [x_i_plus_1, 0], [x_i_plus_1, y_i_plus_1], [x_i, y_i]], edgecolor="black", facecolor="orange", alpha=0.7)
                    area_aproximada += (y_i + y_i_plus_1) / 2 * dx
                
                ax.add_patch(shape)

        # Configura√ß√µes do gr√°fico
        ax.axhline(0, color='black', linewidth=0.8)
        ax.axvline(0, color='black', linewidth=0.8)
        ax.set_title(f"Aproxima√ß√£o por '{method}' com n={n}")
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.grid(True, which='both', linestyle=':', linewidth=0.5)
        
        # Aplicando configura√ß√£o global de eixos
        ax.set_xlim(-limite_eixo, limite_eixo)
        ax.set_ylim(-limite_eixo, limite_eixo)
        ax.set_aspect('equal', adjustable='box')
        ax.legend()
        st.pyplot(fig)

        # --- Exibi√ß√£o dos Resultados ---
        st.markdown("### Resultados")
        col_res1, col_res2 = st.columns(2)
        
        col_res1.metric(label=f"√Årea Aproximada ({method})", value=f"{area_aproximada:.6f}")
        
        try:
            integral_exata = sp.integrate(func_sympy, (x, a, b)).evalf()
            col_res2.metric(label="√Årea Exata (Integral)", value=f"{integral_exata:.6f}", delta=f"{(area_aproximada - integral_exata):.6f}", delta_color="inverse")
        except Exception:
            col_res2.info("N√£o foi poss√≠vel calcular a integral exata.")

        # --- Guia Did√°tico ---
        st.markdown("### Como interpretar o gr√°fico?")
        st.info("""
        A integral definida de $f(x)$ de $a$ at√© $b$ representa a **√°rea l√≠quida** sob a curva.

        - **√Årea Colorida:** O valor exato da integral.
        - **Formas Laranjas:** A aproxima√ß√£o da √°rea usando o m√©todo escolhido.
        
        **Observe:**
        1.  Ao **aumentar o n√∫mero de subdivis√µes (n)**, a soma das √°reas laranjas se aproxima cada vez mais da √°rea colorida.
        2.  Dependendo da fun√ß√£o e do m√©todo, a aproxima√ß√£o pode ser uma **subestima√ß√£o** ou uma **superestima√ß√£o**.
        """)

    except Exception as e:
        st.error(f"Erro ao processar a fun√ß√£o: {str(e)}")

# C1 - LIMITES (VERS√ÉO CORRIGIDA E MAIS INTUITIVA) ===================================================================
elif pagina == "limites":
    import math # Importa a biblioteca de matem√°tica para a compara√ß√£o de floats

    st.subheader("üìè Visualizando o Conceito de Limite")

    # L√™ o valor do limite do eixo a partir do estado da sess√£o
    limite_eixo_global = st.session_state.limite_eixo

    # --- Entradas do Usu√°rio ---
    func_str = st.text_input("Digite a fun√ß√£o f(x):", "sin(x)/x")
    
    try:
        # --- C√°lculos com Sympy ---
        x = sp.symbols('x')
        f_expr = sp.sympify(func_str)
        f_numeric = sp.lambdify(x, f_expr, modules=['numpy', 'math'])

        limite_tipo = st.selectbox("Escolha o tipo de limite:", ["Limite em um Ponto", "Limite no Infinito"])

        # --- L√ìGICA PARA LIMITE EM UM PONTO ---
        if limite_tipo == "Limite em um Ponto":
            x0 = st.number_input("Ponto de an√°lise (onde x tende):", 
                                   min_value=float(-limite_eixo_global), 
                                   max_value=float(limite_eixo_global), 
                                   value=0.0)
            
            try:
                lim_dir = sp.limit(f_expr, x, x0, dir='+')
                lim_esq = sp.limit(f_expr, x, x0, dir='-')
                limite_val = sp.limit(f_expr, x, x0)
                
                st.markdown("---")
                col1, col2, col3 = st.columns(3)
                col1.latex(fr"\lim_{{x \to {x0}^-}} f(x) = {latex(lim_esq)}")
                col2.latex(fr"\lim_{{x \to {x0}^+}} f(x) = {latex(lim_dir)}")

                # CORRE√á√ÉO: Usar math.isclose para comparar floats de forma segura
                # Isso evita erros de arredondamento
                if lim_dir.is_finite and lim_esq.is_finite and math.isclose(float(lim_dir), float(lim_esq)):
                    col3.latex(fr"\lim_{{x \to {x0}}} f(x) = {latex(limite_val)}")
                else:
                    col3.error(r"\text{Limite n√£o existe ou diverge}")

            except Exception as e:
                st.error(f"N√£o foi poss√≠vel calcular o limite: {e}")
                st.stop()
            
            st.markdown("---")
            # O valor inicial do delta foi reduzido para uma visualiza√ß√£o mais pr√≥xima
            delta = st.slider("Proximidade (Œ¥):", min_value=0.01, max_value=3.0, value=0.5, step=0.01)

            # --- Gr√°fico ---
            fig, ax = plt.subplots(figsize=(8, 8))
            
            x_graph = np.linspace(-limite_eixo_global, limite_eixo_global, 1000)
            y_graph = np.array([f_numeric(val) for val in x_graph])
            ax.plot(x_graph, y_graph, label="f(x)", color="blue", linewidth=2, zorder=2)

            # --- Elementos Visuais da Aproxima√ß√£o ---
            x_esq_aprox = x0 - delta
            x_dir_aprox = x0 + delta
            y_esq_aprox = f_numeric(x_esq_aprox)
            y_dir_aprox = f_numeric(x_dir_aprox)

            ax.scatter([x_esq_aprox, x_dir_aprox], [y_esq_aprox, y_dir_aprox], color='purple', s=80, zorder=5, label=f'Pontos em x‚ÇÄ ¬± Œ¥')
            ax.axvline(x0, color='red', linestyle='--', label=f'An√°lise em x={x0}')

            if limite_val.is_finite:
                L = float(limite_val)
                ax.axhline(L, color='green', linestyle='--', label=f'Limite L={L:.3f}', zorder=1)
                
                ax.plot([x_esq_aprox, x_esq_aprox], [y_esq_aprox, L], color='orange', linestyle='--', lw=2, label='Dist√¢ncia |f(x) - L|')
                ax.plot([x_dir_aprox, x_dir_aprox], [y_dir_aprox, L], color='orange', linestyle='--', lw=2)

                with np.errstate(invalid='ignore'):
                    if not np.isfinite(f_numeric(x0)):
                        ax.scatter(x0, L, facecolors='none', edgecolors='red', s=150, zorder=7, linewidth=2, label=f'f({x0}) √© indefinido')
                    else:
                        ax.scatter(x0, L, color='green', s=100, zorder=6, edgecolors='black')

            # Configura√ß√µes do gr√°fico
            ax.axhline(0, color='black', linewidth=0.8)
            ax.grid(True, which='both', linestyle=':', linewidth=0.5)
            ax.set_xlabel("x")
            ax.set_ylabel("y")
            ax.set_title(f"Aproxima√ß√£o do Limite de f(x) quando x ‚Üí {x0}")
            ax.set_xlim(-limite_eixo_global, limite_eixo_global)
            ax.set_ylim(-limite_eixo_global, limite_eixo_global)
            ax.set_aspect('equal', adjustable='box')
            handles, labels = ax.get_legend_handles_labels()
            by_label = dict(zip(labels, handles))
            ax.legend(by_label.values(), by_label.keys(), loc='best')
            st.pyplot(fig)

            st.markdown("### Valores da Aproxima√ß√£o")
            col_aprox1, col_aprox2 = st.columns(2)
            col_aprox1.metric(label=f"Valor √† esquerda f({x_esq_aprox:.2f})", value=f"{y_esq_aprox:.4f}")
            col_aprox2.metric(label=f"Valor √† direita f({x_dir_aprox:.2f})", value=f"{y_dir_aprox:.4f}")
            
            # Guia did√°tico atualizado
            st.markdown("### Como interpretar o gr√°fico?")
            st.info("""
            **Objetivo:** Use o slider **Proximidade (Œ¥)** para aproximar os **pontos roxos** da **linha vermelha**.

            - O limite existe se, ao fazer isso, o comprimento das **linhas laranjas** diminuir e tender a zero.
            - As linhas laranjas representam a dist√¢ncia vertical dos pontos de aproxima√ß√£o at√© o valor do limite (a linha verde).
            """)

        # --- L√ìGICA PARA LIMITE NO INFINITO ---
        elif limite_tipo == "Limite no Infinito":
            infinito_tipo = st.selectbox("Escolha o infinito:", ["+‚àû", "-‚àû"])
            inf_symbol = oo if infinito_tipo == "+‚àû" else -oo
            
            try:
                limite_val = limit(f_expr, x, inf_symbol)
                st.markdown(fr"$$ \text{{O limite de }} f(x) \text{{ quando }} x \to {latex(inf_symbol)} \text{{ √©: }} {latex(limite_val)} $$")
            except Exception as e:
                st.error(f"Erro ao calcular o limite: {e}")
                st.stop()
            
            x_graph_inf = np.linspace(-500, 500, 2000) 
            y_graph_inf = np.array([f_numeric(val) for val in x_graph_inf])
            
            fig, ax = plt.subplots(figsize=(10,6))
            ax.plot(x_graph_inf, y_graph_inf, label="f(x)", color='blue')

            if limite_val.is_finite:
                L = float(limite_val)
                ax.axhline(y=L, color='green', linestyle='dashed', label=f'Ass√≠ntota Horizontal y = {L:.2f}')
                ax.set_ylim(L - limite_eixo_global, L + limite_eixo_global)

            ax.axhline(0, color='black', linewidth=0.8)
            ax.grid(True, which='both', linestyle=':', linewidth=0.5)
            ax.set_xlabel("x")
            ax.set_ylabel("y")
            ax.set_title(f"Comportamento de f(x) quando x ‚Üí {latex(inf_symbol)}")
            ax.legend()
            st.pyplot(fig)

    except Exception as e:
        st.error(f"Erro ao interpretar a fun√ß√£o: {str(e)}")


################################## CALCULO 2 ##############################################################

#C2 - TAYLOR===============================================================================================
elif pagina == "taylor":
    st.subheader("üìä S√©ries de Taylor")
    st.info("(EM BREVE)")


#C2 - INTEGRAL DUPLA=======================================================================================
elif pagina == "integrais_duplas":
    st.subheader("üîÅ Integrais Duplas")
    st.info("(EM BREVE)")


#C2 - EQUA√á√ïES DIFERENCIAIS==================================================================================
elif pagina == "equacoes_diferenciais":
    st.subheader("üåÄ Equa√ß√µes Diferenciais")
    st.info("(EM BREVE)")



################################## CALCULO NUM√âRICO ########################################################

#C.N - PONTO FIXO============================================================================================

elif pagina == "ponto_fixo":
    import sympy as sp
    st.subheader("‚Æç M√©todo do Ponto Fixo")

    casas_decimais = st.slider("N√∫mero de casas decimais para exibi√ß√£o", 2, 10, 4)

    func_str = st.text_input("Digite a fun√ß√£o f(x):", "x**2 - 3*x + 2")
    x = sp.symbols('x')
    f_expr = sp.sympify(func_str)

    if st.button("üîÑ Gerar g(x) automaticamente"):
        g_expr_auto = x - f_expr
        st.session_state.g_expr_sugerido = str(g_expr_auto)

    g_default = st.session_state.get("g_expr_sugerido", "(x**2 + 2)/3")
    g_str = st.text_input("Digite a fun√ß√£o g(x) (isole x):", g_default)

    try:
        g_expr = sp.sympify(g_str)
        f = sp.lambdify(x, f_expr, 'numpy')
        g = sp.lambdify(x, g_expr, 'numpy')
        g_prime_expr = sp.diff(g_expr, x)
        g_prime = sp.lambdify(x, g_prime_expr, 'numpy')

        x0 = st.number_input("Valor inicial x‚ÇÄ:", value=1.0)
        a = st.number_input("Intervalo de teste: limite inferior (a):", value=x0 - 1.0)
        b = st.number_input("Intervalo de teste: limite superior (b):", value=x0 + 1.0)
        tolerancia = st.number_input("Toler√¢ncia:", value=0.0001, format="%.5f")
        max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", value=20, step=1)

        verifica_funcional = sp.simplify(g_expr - x + f_expr)
        if verifica_funcional != 0:
            st.warning("‚ö†Ô∏è A fun√ß√£o g(x) pode n√£o estar corretamente relacionada com f(x) = 0.")

        x_vals = np.linspace(a, b, 500)
        derivadas = np.abs(g_prime(x_vals))
        max_derivada = np.max(derivadas)
        if max_derivada < 1:
            st.success(f"Converg√™ncia prov√°vel: M√°x |g'(x)| = {max_derivada:.4f} < 1")
        else:
            st.warning(f"‚ö†Ô∏è Converg√™ncia n√£o garantida: M√°x |g'(x)| = {max_derivada:.4f} ‚â• 1")

        if abs(g(x0) - x0) > 0.01:
            st.warning("‚ö†Ô∏è A fun√ß√£o g(x) pode n√£o ser adequada: g(x‚ÇÄ) est√° longe de x‚ÇÄ.")

        if st.button("Executar M√©todo do Ponto Fixo"):
            iteracoes = []
            x_atual = x0

            for i in range(max_iter):
                x_novo = g(x_atual)
                fx_n = f(x_novo)
                erro_rel = abs((x_novo - x_atual) / x_novo) * 100 if i > 0 and x_novo != 0 else None
                iteracoes.append((i, x_atual, x_novo, fx_n, erro_rel))
                if erro_rel is not None and erro_rel < tolerancia:
                    break
                x_atual = x_novo

            st.success(f"Aproxima√ß√£o final: {x_novo:.{casas_decimais}f}")

            st.subheader("Itera√ß√µes passo a passo")
            for i, x_antigo, x_novo, fx_n, erro_rel in iteracoes:
                col1, col2 = st.columns(2)
                with col1:
                    try:
                        x_vals = np.linspace(x0 - 5, x0 + 5, 400)

                        y_f_vals = []
                        y_g_vals = []
                        for v in x_vals:
                            try:
                                f_val = f(v)
                            except:
                                f_val = np.nan

                            try:
                                try:
                                    with np.errstate(over='ignore', invalid='ignore'):
                                        f_val = f(v)
                                except:
                                    f_val = np.nan

                                try:
                                    with np.errstate(over='ignore', invalid='ignore'):
                                        g_val = g(v)
                                except:
                                    g_val = np.nan

                            except:
                                g_val = np.nan

                            if np.isfinite(f_val):
                                y_f_vals.append(f_val)
                            else:
                                y_f_vals.append(np.nan)

                            if np.isfinite(g_val):
                                y_g_vals.append(g_val)
                            else:
                                y_g_vals.append(np.nan)


                        fig, ax = plt.subplots()
                        ax.plot(x_vals, y_f_vals, label="f(x)", color='green')
                        ax.plot(x_vals, y_g_vals, label="g(x)", color='blue')
                        ax.plot(x_vals, x_vals, '--', color='black', label="y = x")

                        try:
                            y_gxn = g(x_antigo)
                            if np.isfinite(y_gxn):
                                ax.plot([x_antigo, x_antigo], [0, y_gxn], color='red', linestyle='--', label='proje√ß√£o')
                                ax.scatter([x_antigo], [y_gxn], color='red', zorder=5, label=f"x_{{{i+1}}}")
                        except Exception as e:
                            st.warning(f"N√£o foi poss√≠vel plotar g(x_antigo): {e}")

                        ax.axhline(0, color='black', linewidth=0.5)
                        ax.axvline(0, color='black', linewidth=0.5)
                        ax.set_xlim(-10, 10)
                        ax.set_ylim(-10, 10)
                        ax.set_xlabel("x")
                        ax.set_ylabel("y")
                        ax.grid(True)
                        ax.legend()
                        ax.set_title(f"Itera√ß√£o {i+1}")
                        st.pyplot(fig)

                    except Exception as e:
                        st.error(f"Erro ao construir o gr√°fico: {e}")

                with col2:
                    st.latex(rf"x_{{{i}}} = {x_antigo:.{casas_decimais}f}")
                    st.latex(rf"g(x_{{{i}}}) = {x_novo:.{casas_decimais}f}")
                    st.latex(rf"f(x_{{{i+1}}}) = {fx_n:.{casas_decimais}f}")
                    if erro_rel is not None:
                        st.latex(
                            rf"\text{{Erro relativo}} = \left| \frac{{x_{{{i+1}}} - x_{{{i}}}}}{{x_{{{i+1}}}}} \right| \times 100 = {erro_rel:.{casas_decimais}f}\%"
                        )
                    else:
                        st.latex("‚Äî")

            st.subheader("üìä Tabela de Itera√ß√µes")
            st.dataframe({
                "Itera√ß√£o": [i for i, *_ in iteracoes],
                "x_n": [x_n for _, x_n, *_ in iteracoes],
                "g(x_n)": [gx for _, _, gx, *_ in iteracoes],
                "f(x_n)": [fx for *_, fx, _ in iteracoes],
                "Erro Relativo (%)": [
                    f"{erro:.{casas_decimais}f}" if erro is not None else "‚Äî"
                    for *_, erro in iteracoes
                ]
            })

    except Exception as e:
        st.error(f"Erro ao interpretar a fun√ß√£o: {str(e)}")


#C.N - BISSE√á√ÉO============================================================================================

elif pagina == "bissecao":
    import imageio.v2 as imageio

    st.subheader("üîç Bisse√ß√£o")
    
    casas_decimais = st.slider("N√∫mero de casas decimais para exibi√ß√£o", 2, 10, 4)

    def criar_funcao(expr):
        def f(x):
            return eval(expr, {"x": x, "np": np, "sin": np.sin, "cos": np.cos,
                               "tan": np.tan, "exp": np.exp, "log": np.log,
                               "sqrt": np.sqrt, "pi": np.pi, "e": np.e, "__builtins__": {}})
        return f

    def bissecao(f, a, b, tol=1e-6, max_iter=100):
        if f(a) * f(b) >= 0:
            raise ValueError("O intervalo [a, b] n√£o contem uma mudan√ßa de sinal (f(a)*f(b) < 0).")
        iteracoes = []
        iter_count = 0
        erro = None
        while (b - a) / 2 > tol and iter_count < max_iter:
            c = (a + b) / 2
            erro = abs(b - a) / 2
            if len(iteracoes) > 0:
                c_anterior = iteracoes[-1][3]  # o √∫ltimo c da lista
                erro_rel = abs((c - c_anterior) / c) * 100 if c != 0 else None
            else:
                erro_rel = None

            iteracoes.append((iter_count, a, b, c, f(a), f(b), f(c), erro, erro_rel))
            if abs(f(c)) < tol:
                break
            if f(c) * f(a) < 0:
                b = c
            else:
                a = c
            iter_count += 1
        return (a + b) / 2, iteracoes

    expr = st.text_input("Digite a fun√ß√£o f(x):", value="x**3 - x - 2")

    if expr:
        try:
            func = criar_funcao(expr)

            st.markdown("### Escolha do intervalo [a, b]")
            a = st.number_input("Valor de a:", value=1.0)
            b = st.number_input("Valor de b:", value=2.0)
            tol = st.number_input("Toler√¢ncia:", value=1e-6, format="%.10f")
            max_iter = st.number_input("M√°ximo de itera√ß√µes:", value=50, step=1)

            if st.button("Executar M√©todo da Bisse√ß√£o"):
                try:
                    raiz, iteracoes = bissecao(func, a, b, tol, max_iter)
                    st.success(f"Raiz aproximada: {raiz:.10f}")

                    st.markdown("### Itera√ß√µes passo a passo")
                    for i, (it, a_i, b_i, c_i, fa, fb, fc, erro, erro_rel) in enumerate(iteracoes):
                        col1, col2 = st.columns(2)
                        with col1:
                            fig, ax = plt.subplots()
                            x_vals = np.linspace(-10, 10, 1000)
                            y_vals = [func(x) for x in x_vals]
                            ax.plot(x_vals, y_vals, label="f(x)", color='blue')
                            ax.axhline(0, color='black')
                            ax.axvline(a_i, color='green', linestyle='--', label='a')
                            ax.axvline(b_i, color='red', linestyle='--', label='b')
                            ax.axvline(c_i, color='orange', linestyle='--', label='c')
                            ax.set_xlim(-10, 10)
                            ax.set_ylim(-10, 10)
                            ax.legend()
                            ax.set_title(f"Itera√ß√£o {i + 1}")
                            ax.grid(True)
                            st.pyplot(fig)
                        with col2:
                            st.latex(rf"a_{{{i+1}}} = {a_i:.6f} \,\quad b_{{{i+1}}} = {b_i:.6f}")
                            st.latex(rf"f(a_{{{i+1}}}) = {fa:.6f} \,\quad f(b_{{{i+1}}}) = {fb:.6f}")
                            st.latex(rf"c_{{{i+1}}} = \frac{{a_{{{i+1}}} + b_{{{i+1}}}}}{{2}} = {c_i:.6f}")
                            st.latex(rf"f(c_{{{i+1}}}) = {fc:.6f}")
                            if erro_rel is not None:
                                st.latex(rf"\text{{Erro relativo}} = \left| \frac{{c_{{{i+1}}} - c_{{{i}}}}}{{c_{{{i+1}}}}} \right| \times 100 = {erro_rel:.{casas_decimais}f}\%")
                            else:
                                st.latex("-----")

                except Exception as e:
                    st.error(f"Erro durante a execu√ß√£o do m√©todo: {str(e)}")

                st.subheader("üìä Tabela de Itera√ß√µes")
                st.dataframe({
                    "Itera√ß√£o": [it[0] for it in iteracoes],
                    "a": [it[1] for it in iteracoes],
                    "b": [it[2] for it in iteracoes],
                    "c": [it[3] for it in iteracoes],
                    "f(a)": [it[4] for it in iteracoes],
                    "f(b)": [it[5] for it in iteracoes],
                    "f(c)": [it[6] for it in iteracoes],
                    "Erro relativo (%)": [
                            f"{it[8]:.{casas_decimais}f}" if it[8] is not None else "‚Äî" for it in iteracoes
                        ]                    
                })


        except Exception as e:
            st.error(f"Erro ao interpretar a fun√ß√£o: {str(e)}")


#C.N - FALSA POSI√á√ÉO==========================================================================================
elif pagina == "falsa_posicao":
    import imageio.v2 as imageio

    st.subheader("üü∞ Falsa Posi√ß√£o (Regula Falsi)")

    casas_decimais = st.slider("N√∫mero de casas decimais para exibi√ß√£o", 2, 10, 4)

    def criar_funcao(expr):
        def f(x):
            return eval(expr, {"x": x, "np": np, "sin": np.sin, "cos": np.cos,
                               "tan": np.tan, "exp": np.exp, "log": np.log,
                               "sqrt": np.sqrt, "pi": np.pi, "e": np.e, "__builtins__": {}})
        return f

    def falsa_posicao(f, a, b, tol=1e-6, max_iter=100):
        if f(a) * f(b) >= 0:
            raise ValueError("O intervalo [a, b] n√£o cont√©m uma mudan√ßa de sinal.")

        iteracoes = []
        c_anterior = None

        for i in range(max_iter):
            fa = f(a)
            fb = f(b)
            c = (a * fb - b * fa) / (fb - fa)
            fc = f(c)

            if c_anterior is None:
                erro_rel = None
            else:
                erro_rel = abs((c - c_anterior) / c) * 100 if c != 0 else None

            iteracoes.append((i, a, b, c, fa, fb, fc, erro_rel))

            if erro_rel is not None and erro_rel < tol:
                break

            if fa * fc < 0:
                b = c
            else:
                a = c

            c_anterior = c

        return c, iteracoes

    expr = st.text_input("Digite a fun√ß√£o f(x):", value="x**3 - x - 2")

    if expr:
        try:
            func = criar_funcao(expr)

            st.markdown("### Escolha do intervalo [a, b] e par√¢metros")
            a = st.number_input("Valor de a:", value=1.0)
            b = st.number_input("Valor de b:", value=2.0)
            tol = st.number_input("Toler√¢ncia:", value=1e-6, format="%.10f")
            max_iter = st.number_input("M√°ximo de itera√ß√µes:", value=50, step=1)

            x_vals = np.linspace(-10, 10, 1000)
            y_vals = [func(x) for x in x_vals]

            fig, ax = plt.subplots()
            ax.plot(x_vals, y_vals, label="f(x)", color='blue')
            ax.axhline(0, color='black', linewidth=1)
            ax.axvline(0, color='black', linewidth=1)
            ax.axvline(a, color='green', linestyle='--', label=f'a = {a}')
            ax.axvline(b, color='red', linestyle='--', label=f'b = {b}')
            ax.set_xlim(-10, 10)
            ax.set_ylim(-10, 10)
            ax.set_xlabel("x")
            ax.set_ylabel("f(x)")
            ax.set_title("Gr√°fico de f(x) e intervalo inicial")
            ax.grid(True)
            ax.legend()
            st.pyplot(fig)

            if st.button("Executar M√©todo da Falsa Posi√ß√£o"):
                try:
                    raiz, iteracoes = falsa_posicao(func, a, b, tol, max_iter)
                    st.success(f"Raiz aproximada: {raiz:.10f}")

                    st.markdown("### Itera√ß√µes passo a passo")
                    for i, a_i, b_i, c_i, fa, fb, fc, erro_rel in iteracoes:
                        col1, col2 = st.columns(2)
                        with col1:
                            fig, ax = plt.subplots()
                            x_vals = np.linspace(-10, 10, 1000)
                            y_vals = [func(x) for x in x_vals]
                            ax.plot(x_vals, y_vals, label="f(x)", color='blue')
                            ax.axhline(0, color='black')
                            ax.axvline(a_i, color='green', linestyle='--', label='a')
                            ax.axvline(b_i, color='red', linestyle='--', label='b')
                            ax.axvline(c_i, color='orange', linestyle='--', label='c')
                            ax.plot([a_i, b_i], [fa, fb], 'r--', label='secante')
                            ax.set_xlim(-10, 10)
                            ax.set_ylim(-10, 10)
                            ax.set_title(f"Itera√ß√£o {i+1}")
                            ax.grid(True)
                            ax.legend()
                            st.pyplot(fig)
                        with col2:
                            st.latex(rf"a_{{{i+1}}} = {a_i:.6f} \,\quad b_{{{i+1}}} = {b_i:.6f}")
                            st.latex(rf"f(a_{{{i+1}}}) = {fa:.6f} \,\quad f(b_{{{i+1}}}) = {fb:.6f}")
                            st.latex(rf"c_{{{i+1}}} = \frac{{a f(b) - b f(a)}}{{f(b) - f(a)}} = {c_i:.6f}")
                            st.latex(rf"f(c_{{{i+1}}}) = {fc:.6f}")
                            if erro_rel is not None:
                                st.latex(rf"\text{{Erro relativo}} = \left| \frac{{c_{{{i+1}}} - c_{{{i}}}}}{{c_{{{i+1}}}}} \right| \times 100 = {erro_rel:.{casas_decimais}f}\%")
                            else:
                                st.latex("-----")

                    st.subheader("üìä Tabela de Itera√ß√µes")
                    st.dataframe({
                        "Itera√ß√£o": [i[0] for i in iteracoes],
                        "a": [i[1] for i in iteracoes],
                        "b": [i[2] for i in iteracoes],
                        "c": [i[3] for i in iteracoes],
                        "f(a)": [i[4] for i in iteracoes],
                        "f(b)": [i[5] for i in iteracoes],
                        "f(c)": [i[6] for i in iteracoes],
                        "Erro relativo (%)": [
                            f"{i[7]:.{casas_decimais}f}" if i[7] is not None else "‚Äî" for i in iteracoes
                        ]
                    })

                except Exception as e:
                    st.error(f"Erro durante a execu√ß√£o do m√©todo: {str(e)}")

        except Exception as e:
            st.error(f"Erro ao interpretar a fun√ß√£o: {str(e)}")




#C.N - M√âTODO GRAFICO=========================================================================================
elif pagina == "metodo_grafico":
    st.subheader("üìâ M√©todo Gr√°fico")

    func_str = st.text_input("Digite a fun√ß√£o f(x):", value="x**2 - 4")

    try:
        x = sp.symbols('x')
        func_expr = sp.sympify(func_str)
        func = sp.lambdify(x, func_expr, 'numpy')

        st.markdown("### Intervalo de destaque (opcional)")
        a = st.number_input("x m√≠nimo do intervalo destacado:", value=-1.0)
        b = st.number_input("x m√°ximo do intervalo destacado:", value=2.0)

        x_vals = np.linspace(-10, 10, 1000)
        y_vals = func(x_vals)

        fig, ax = plt.subplots()
        ax.plot(x_vals, y_vals, label=f'f(x) = {func_str}', color='blue')
        ax.axhline(0, color='black', linewidth=0.5)
        ax.axvline(0, color='black', linewidth=0.5)
        ax.axvline(a, color='green', linestyle='--', label='x m√≠nimo (a)')
        ax.axvline(b, color='red', linestyle='--', label='x m√°ximo (b)')
        ax.set_xlim(-10, 10)
        ax.set_ylim(-10, 10)
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

        st.markdown("### üéØ Adivinhe uma raiz da fun√ß√£o!")
        palpite = st.number_input("Qual o valor de x que voc√™ acha ser uma raiz da fun√ß√£o?", value=0.0)

        y_palpite = func(palpite)
        st.write(f"Em x = {palpite}, f(x) = {y_palpite:.4f}")

        if abs(y_palpite) < 0.01:
            st.success("üéâ Parab√©ns! Seu palpite est√° muito pr√≥ximo de uma raiz.")
        else:
            st.warning("ü§î Ainda n√£o √© uma raiz exata. Continue tentando!")

        st.markdown("### üîé Zoom na regi√£o do seu chute")
        x_zoom = np.linspace(palpite - 1, palpite + 1, 500)
        y_zoom = func(x_zoom)
        fig_zoom, ax_zoom = plt.subplots()
        ax_zoom.plot(x_zoom, y_zoom, label='Fun√ß√£o real', color='blue')
        ax_zoom.axhline(0, color='black', linewidth=0.5)
        ax_zoom.axvline(palpite, color='orange', linestyle='--', label='Seu chute')
        ax_zoom.set_title(f'Zoom em x = {palpite}')
        ax_zoom.legend()
        ax_zoom.grid(True)
        st.pyplot(fig_zoom)

    except Exception as e:
        st.error(f"Erro ao processar a fun√ß√£o: {str(e)}")


#C.N - M√âTODO SECANTE=========================================================================================
elif pagina == "secante":
    import sympy as sp
    import io
    import imageio.v2 as imageio

    st.subheader("‚öôÔ∏è M√©todo da Secante")

    casas_decimais = st.slider("N√∫mero de casas decimais para exibi√ß√£o", 2, 10, 4)

    func_str = st.text_input("Digite a fun√ß√£o f(x):", "x**3 - x - 2")

    try:
        x = sp.symbols('x')
        f_expr = sp.sympify(func_str)
        f = sp.lambdify(x, f_expr, 'numpy')

        x0 = st.number_input("Digite o valor inicial x‚ÇÄ:", value=1.0)
        x1 = st.number_input("Digite o segundo valor inicial x‚ÇÅ:", value=2.0)
        tolerancia = st.number_input("Toler√¢ncia:", value=0.0001, format="%.5f")
        max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", value=20, step=1)

        if st.button("Executar M√©todo da Secante"):
            iteracoes = []
            imagens = []

            for i in range(max_iter):
                f_x0 = f(x0)
                f_x1 = f(x1)

                if f_x1 - f_x0 == 0:
                    st.error(f"Divis√£o por zero na itera√ß√£o {i}. Interrompendo.")
                    break

                x2 = x1 - f_x1 * (x1 - x0) / (f_x1 - f_x0)
                erro_rel = abs((x2 - x1) / x2) * 100 if i > 0 and x2 != 0 else None

                iteracoes.append((i, x0, x1, x2, f_x0, f_x1, erro_rel))

                if erro_rel is not None and erro_rel < tolerancia:
                    break

                x0, x1 = x1, x2

            st.success(f"Aproxima√ß√£o final da raiz: {x2:.{casas_decimais}f}")
            st.subheader("Itera√ß√µes passo a passo")

            for i, x0_i, x1_i, x2_i, fx0, fx1, erro_rel in iteracoes:
                col1, col2 = st.columns(2)

                with col1:
                    fig, ax = plt.subplots()
                    x_vals = np.linspace(-10, 10, 400)
                    y_vals = [f(val) for val in x_vals]
                    ax.plot(x_vals, y_vals, label="f(x)", color='blue')
                    ax.axhline(0, color='black', linewidth=0.5)
                    ax.axvline(0, color='black', linewidth=0.5)
                    ax.plot([x0_i, x1_i], [fx0, fx1], 'r--', label='Reta Secante')
                    ax.plot(x2_i, 0, 'ro', label=f"x_{i+2}")
                    ax.set_xlim(-10, 10)
                    ax.set_ylim(-10, 10)
                    ax.grid(True)
                    ax.legend()
                    ax.set_title(f"Itera√ß√£o {i + 1}")
                    st.pyplot(fig)

                with col2:
                    st.latex(rf"x_{{{i}}} = {x0_i:.{casas_decimais}f}, \quad x_{{{i+1}}} = {x1_i:.{casas_decimais}f}")
                    st.latex(rf"f(x_{{{i}}}) = {fx0:.{casas_decimais}f}, \quad f(x_{{{i+1}}}) = {fx1:.{casas_decimais}f}")
                    st.latex(rf"x_{{{i+2}}} = x_{{{i+1}}} - \frac{{f(x_{{{i+1}}})(x_{{{i+1}}} - x_{{{i}}})}}{{f(x_{{{i+1}}}) - f(x_{{{i}}})}} = {x2_i:.{casas_decimais}f}")
                    if erro_rel is not None:
                        st.latex(
                            rf"\text{{Erro relativo}} = \left| \frac{{x_{{{i+2}}} - x_{{{i+1}}}}}{{x_{{{i+2}}}}} \right| \times 100 = {erro_rel:.{casas_decimais}f}\%"
                        )
                    else:
                        st.latex("‚Äî")

                # salvar imagem para gif
                buf = io.BytesIO()
                fig.savefig(buf, format='png')
                buf.seek(0)
                imagens.append(imageio.imread(buf))
                plt.close(fig)

            if imagens:
                st.subheader("Anima√ß√£o do processo:")
                gif_path = "/tmp/secante_iteracoes.gif"
                imageio.mimsave(gif_path, imagens, fps=1)
                with open(gif_path, "rb") as f:
                    gif_bytes = f.read()
                st.image(gif_bytes)

            # TABELA DE ITERA√á√ïES
            st.subheader("üìä Tabela de Itera√ß√µes")
            st.dataframe({
                "Itera√ß√£o": [i for i, *_ in iteracoes],
                "x_n-1": [x0_i for _, x0_i, *_ in iteracoes],
                "x_n": [x1_i for _, _, x1_i, *_ in iteracoes],
                "x_n+1": [x2_i for _, _, _, x2_i, *_ in iteracoes],
                "f(x_n-1)": [fx0 for _, _, _, _, fx0, *_ in iteracoes],
                "f(x_n)": [fx1 for _, _, _, _, _, fx1, *_ in iteracoes],
                "Erro Relativo (%)": [
                    f"{erro:.{casas_decimais}f}" if erro is not None else "‚Äî"
                    for *_, erro in iteracoes
                ]
            })

    except Exception as e:
        st.error(f"Erro ao processar a fun√ß√£o: {str(e)}")


#C.N - M√âTODO NEWTON==========================================================================================
elif pagina == "newton":
    import io
    import imageio.v2 as imageio
    from sympy import symbols, diff, lambdify, sympify

    st.subheader("‚öôÔ∏è M√©todo de Newton - Visualiza√ß√£o Iterativa")

    casas_decimais = st.slider("N√∫mero de casas decimais para exibi√ß√£o", 2, 10, 4)

    funcao = st.text_input("Digite a fun√ß√£o f(x):", value="x**2 - 2")

    if funcao:
        x = symbols('x')
        f_expr = sympify(funcao)
        f_prime_expr = diff(f_expr, x)

        f = lambdify(x, f_expr, 'numpy')
        f_prime = lambdify(x, f_prime_expr, 'numpy')

        x_vals = np.linspace(-10, 10, 400)
        try:
            y_vals = f(x_vals)
            fig, ax = plt.subplots()
            ax.plot(x_vals, y_vals, label=f'f(x) = {funcao}')
            ax.axhline(0, color='black', linewidth=0.5)
            ax.axvline(0, color='black', linewidth=0.5)
            ax.set_xlim(-10, 10)
            ax.set_ylim(-10, 10)
            ax.set_title('Gr√°fico da Fun√ß√£o')
            ax.legend()
            st.pyplot(fig)
        except:
            st.error("Erro ao tentar avaliar a fun√ß√£o. Verifique a sintaxe.")
            st.stop()

        x0 = st.number_input("Digite o valor inicial x‚ÇÄ:", value=1.0)
        tolerancia = st.number_input("Digite a toler√¢ncia:", value=0.0001, format="%.5f")
        max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", value=10, step=1)

        if st.button("Executar M√©todo de Newton"):
            iteracoes = []
            x_atual = x0

            for i in range(max_iter):
                f_x = f(x_atual)
                f_deriv = f_prime(x_atual)

                if f_deriv == 0:
                    st.error(f"Derivada nula em x = {x_atual}. M√©todo interrompido.")
                    break

                x_novo = x_atual - f_x / f_deriv
                erro_rel = abs((x_novo - x_atual) / x_novo) * 100 if i > 0 and x_novo != 0 else None

                iteracoes.append({
                    'i': i,
                    'x_n': x_atual,
                    'f(x_n)': f_x,
                    "f'(x_n)": f_deriv,
                    'x_{n+1}': x_novo,
                    'erro_rel': erro_rel
                })

                if erro_rel is not None and erro_rel < tolerancia:
                    break

                x_atual = x_novo

            st.subheader("Itera√ß√µes passo a passo")
            imagens = []

            for it in iteracoes:
                i = it['i']
                x_n = it['x_n']
                fx = it['f(x_n)']
                dfx = it["f'(x_n)"]
                x_n1 = it['x_{n+1}']
                erro = it['erro_rel']
                col1, col2 = st.columns(2)

                with col1:
                    fig, ax = plt.subplots()
                    ax.plot(x_vals, f(x_vals), label='f(x)', color='blue')
                    tangente = lambda x_val: dfx * (x_val - x_n) + fx
                    ax.plot(x_vals, tangente(x_vals), 'g--', label='Tangente')
                    ax.plot(x_n, fx, 'ro', label=f'x{i+1}')
                    ax.plot(x_n1, 0, 'bo', label=f'x{i+2}')
                    ax.plot([x_n1, x_n1], [0, f(x_n1)], 'k--', linewidth=1)
                    ax.axhline(0, color='black', linewidth=0.5)
                    ax.axvline(0, color='black', linewidth=0.5)
                    ax.set_xlim(-10, 10)
                    ax.set_ylim(-10, 10)
                    ax.set_title(f"Itera√ß√£o {i + 1}")
                    ax.legend()
                    ax.grid(True)
                    st.pyplot(fig)

                with col2:
                    st.latex(rf"x_{{{i}}} = {x_n:.{casas_decimais}f}")
                    st.latex(rf"f(x_{{{i}}}) = {fx:.{casas_decimais}f}")
                    st.latex(rf"f'(x_{{{i}}}) = {dfx:.{casas_decimais}f}")
                    st.latex(rf"x_{{{i+1}}} = x_{{{i}}} - \frac{{f(x_{{{i}}})}}{{f'(x_{{{i}}})}} = {x_n1:.{casas_decimais}f}")
                    if erro is not None:
                        st.latex(
                            rf"\text{{Erro relativo}} = \left| \frac{{x_{{{i+1}}} - x_{{{i}}}}}{{x_{{{i+1}}}}} \right| \times 100 = {erro:.{casas_decimais}f}\%"
                        )
                    else:
                        st.latex("‚Äî")

                buf = io.BytesIO()
                fig.savefig(buf, format='png')
                buf.seek(0)
                imagens.append(imageio.imread(buf))
                plt.close(fig)

            if imagens:
                st.subheader("Anima√ß√£o do processo:")
                gif_path = "/tmp/newton_iteracoes.gif"
                imageio.mimsave(gif_path, imagens, fps=1)
                with open(gif_path, "rb") as f:
                    gif_bytes = f.read()
                st.image(gif_bytes)

            st.subheader("üìä Tabela de Itera√ß√µes")
            st.dataframe({
                "Itera√ß√£o": [it['i'] for it in iteracoes],
                "x_n": [it['x_n'] for it in iteracoes],
                "f(x_n)": [it['f(x_n)'] for it in iteracoes],
                "f'(x_n)": [it["f'(x_n)"] for it in iteracoes],
                "x_{n+1}": [it['x_{n+1}'] for it in iteracoes],
                "Erro Relativo (%)": [
                    f"{it['erro_rel']:.{casas_decimais}f}" if it['erro_rel'] is not None else "‚Äî"
                    for it in iteracoes
                ]
            })


#C.N - M√âTODO JACOBI==========================================================================================
elif pagina == "jacobi":
    st.subheader("üß∂ M√©todo de Jacobi-Richardson")
    st.markdown("""
        <style>
        div[data-testid="stTextInput"] {
            width: 50px !important;
            margin: 0 !important;
            padding: 0 !important;
        }
        div[data-testid="stTextInput"] input {
            width: 100% !important;
            text-align: center;
            font-size: 14px;
            padding: 2px 4px;
        }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("Escolha o tamanho do sistema e preencha os coeficientes da matriz A e do vetor b:")
    n = st.number_input("Tamanho do sistema (n x n):", min_value=2, max_value=10, value=3)

    st.markdown("### Sistema linear (matriz A | vetor b):")
    A = np.zeros((n, n))
    b = np.zeros(n)

    with st.container():
        col_central = st.columns([0.25, 0.5, 0.25])[1]
        with col_central:
            for i in range(n):
                linha = st.columns(n + 2, gap="small") 
                for j in range(n):
                    with linha[j]:
                        val = st.text_input(f"A{i}{j}", value="0", key=f"A_{i}_{j}", label_visibility="collapsed")
                        try:
                            A[i][j] = float(val.replace(",", "."))
                        except:
                            A[i][j] = 0.0
                with linha[n]:
                    st.markdown("**|**", unsafe_allow_html=True)
                with linha[n + 1]:
                    val_b = st.text_input(f"b{i}", value="0", key=f"b_{i}", label_visibility="collapsed")
                    try:
                        b[i] = float(val_b.replace(",", "."))
                    except:
                        b[i] = 0.0

    tol = st.number_input("Toler√¢ncia:", value=0.0000001, format="%.12f")
    max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", value=100, step=1)
    casas = st.slider("Casas decimais:", 2, 10, 4)

    if st.button("Executar M√©todo de Jacobi"):
        try:
            dominante = True
            for i in range(n):
                diag = abs(A[i][i])
                soma_outros = np.sum(np.abs(A[i])) - diag
                if diag <= soma_outros:
                    dominante = False
                    break

            if dominante:
                st.success("‚úÖ A matriz A √© diagonal dominante. O m√©todo deve convergir.")
            else:
                st.warning("‚ö†Ô∏è A matriz A N√ÉO √© diagonal dominante. O m√©todo pode n√£o convergir.")

            D = np.diag(A)
            R = A - np.diagflat(D)
            x = np.zeros_like(b)
            iteracoes = []

            st.subheader("üîç Passo a passo das itera√ß√µes")
            for k in range(1, max_iter + 1):
                x_novo = (b - np.dot(R, x)) / D
                erro_iter = np.linalg.norm(x_novo - x, ord=np.inf)
                erro_relativo = erro_iter / (np.linalg.norm(x_novo, ord=np.inf) + 1e-12)

                iteracoes.append({
                    "Iteracao": k,
                    "x": x_novo.copy(),
                    "Erro It": erro_iter,
                    "Relativo": erro_relativo
                })

                with st.expander(f"üîπ Itera√ß√£o {k}"):
                    for i in range(n):
                        soma = " + ".join([f"{A[i][j]:.2f} ‚ãÖ {x[j]:.{casas}f}" for j in range(n) if j != i])
                        st.latex(
                            rf"x_{{{i+1}}}^{{({k})}} = \frac{{1}}{{{A[i][i]:.2f}}} ( {b[i]:.2f} - ( {soma} ) ) = {x_novo[i]:.{casas}f}"
                        )
                    st.latex(rf"\|x^{{({k})}} - x^{{({k-1})}}\|_\infty = {erro_iter:.{casas}f}")
                    st.latex(rf"\text{{Erro relativo}} = \frac{{\|x^{{({k})}} - x^{{({k-1})}}\|_\infty}}{{\|x^{{({k})}}\|_\infty}} = {erro_relativo:.{casas}f}")

                if erro_relativo < tol:
                    break
                x = x_novo

            st.success(f"Solu√ß√£o aproximada ap√≥s {len(iteracoes)} itera√ß√µes:")
            for i, val in enumerate(x_novo):
                st.latex(f"x_{{{i+1}}} = {val:.{casas}f}")

            st.subheader("üìä Tabela de Itera√ß√µes")
            tabela = {
                "Itera√ß√£o": [it["Iteracao"] for it in iteracoes],
                **{f"x{i+1}": [round(it["x"][i], casas) for it in iteracoes] for i in range(n)},
                "Erro It": [round(it["Erro It"], casas) for it in iteracoes],
                "Relativo": [round(it["Relativo"], casas) for it in iteracoes]
            }
            st.dataframe(tabela)

            st.subheader("üß™ Verifica√ß√£o da Solu√ß√£o")
            b_calc = np.dot(A, x_novo)
            for i in range(n):
                st.latex(
                    f"Ax_{{{i+1}}} = {b_calc[i]:.{casas}f} \\Rightarrow\\ b_{{{i+1}}} = {b[i]:.{casas}f} \\Rightarrow\\ |erro| = {abs(b[i] - b_calc[i]):.{casas}f}"
                )

        except Exception as e:
            st.error(f"Erro: {str(e)}")

        try:
            x_exata = np.linalg.solve(A, b)
            st.subheader("üåü Compara√ß√£o com solu√ß√£o exata (np.linalg.solve):")
            for i in range(n):
                erro_abs = abs(x_exata[i] - x_novo[i])
                st.latex(
                    rf"x_{{{i+1}}} \approx {x_novo[i]:.{casas}f} \;\; \text{{vs}} \;\; x_{{{i+1}}}^* = {x_exata[i]:.{casas}f} \Rightarrow \left| \text{{erro}} \right| = {erro_abs:.{casas}f}"
                )
        except:
            st.info("N√£o foi poss√≠vel calcular a solu√ß√£o exata com numpy (sistema talvez mal definido).")
